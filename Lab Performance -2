Task-1:

Imagine you are developing a Java application for a car rental agency. In this system, you have a class called Vehicle representing general properties and behaviors of vehicles.
Additionally, you have a subclass called Car, which extends the Vehicle class and adds specific features related to cars, such as the number of doors and the type of fuel.
While implementing methods in the Car class, you find yourself needing to differentiate between local variables, instance variables, and superclass variables.
1.	Explain the role and usage of the super keyword in Java. Provide examples illustrating how super can be used to access superclass members and invoke superclass constructors within a subclass like Car.
2.	Describe the significance of the this keyword in Java and how it differs from super. 
Give examples demonstrating the use of this to refer to instance variables and methods within the same class, and discuss scenarios where using this is necessary for disambiguation or clarification.

Task-2: 
a.	Recall the basic principles of exception handling in Java, give example of try-catch blocks and the handling of checked exception. 
b.  Write a program to demonstrate Interface and implements multiple interface in a java.



// Name : Shweta Kumari
// Roll no . : 2210997232

Task 1:

public class Vehicle {
    private String fuelType;

    public Vehicle() {
        this.fuelType = "Petrol";
    }

    public void start() {
        System.out.println("Vehicle start code");
    }
}

public class Car extends Vehicle {
    private int numberOfDoors;

    public Car() {
        super();
    }

    public void setNumberOfDoors(int numberOfDoors) {
        this.numberOfDoors = numberOfDoors;
    }

    public void run() {
        super.start();
    }
}

public class Main {
    public static void main(String[] args) {
        Car car = new Car();
        car.setNumberOfDoors(4);
        car.run();
    }
}


Task 2:

public class ExceptionHandlingExample {
    public static void main(String[] args) {
        try {
            int result = divide(10, 0);
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public static int divide(int num1, int num2) throws ArithmeticException {
        return num1 / num2;
    }
}

interface Interface1 {
    public void method1();
}

interface Interface2 {
    public void method2();
}

class MyClass implements Interface1, Interface2 {
    public void method1() {
        System.out.println("Interface1 method");
    }

    public void method2() {
        System.out.println("Interface2 method");
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.method1();
        obj.method2();
    }
}

