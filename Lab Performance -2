Task-1:

Imagine you are developing a Java application for a car rental agency. In this system, you have a class called Vehicle representing general properties and behaviors of vehicles.
Additionally, you have a subclass called Car, which extends the Vehicle class and adds specific features related to cars, such as the number of doors and the type of fuel.
While implementing methods in the Car class, you find yourself needing to differentiate between local variables, instance variables, and superclass variables.
1.	Explain the role and usage of the super keyword in Java. Provide examples illustrating how super can be used to access superclass members and invoke superclass constructors within a subclass like Car.
2.	Describe the significance of the this keyword in Java and how it differs from super. 
Give examples demonstrating the use of this to refer to instance variables and methods within the same class, and discuss scenarios where using this is necessary for disambiguation or clarification.

Task-2: 
a.	Recall the basic principles of exception handling in Java, give example of try-catch blocks and the handling of checked exception. 
b.  Write a program to demonstrate Interface and implements multiple interface in a java.


ANSWER:-

public class Vehicle {
    // Instance variables
    private String manufacturer;
    private int year;
    
    // Constructor
    public Vehicle(String manufacturer, int year) {
        this.manufacturer = manufacturer;
        this.year = year;
    }
    
    // Getter methods
    public String getManufacturer() {
        return manufacturer;
    }
    
    public int getYear() {
        return year;
    }
}

public class Car extends Vehicle {
    // Instance variable specific to Car class
    private int numDoors;
    private String fuelType;
    
    // Constructor
    public Car(String manufacturer, int year, int numDoors, String fuelType) {
        super(manufacturer, year); // Call superclass constructor
        this.numDoors = numDoors;
        this.fuelType = fuelType;
    }
    
    // Getter methods specific to Car class
    public int getNumDoors() {
        return numDoors;
    }
    
    public String getFuelType() {
        return fuelType;
    }
    
    // Method using local variable, instance variable, and superclass variable
    public void displayCarDetails() {
        // Local variable
        String message = "This car is manufactured by " + super.getManufacturer() + " in " + super.getYear();
        
        // Instance variable
        message += ", has " + numDoors + " doors";
        
        // Superclass variable accessed through superclass methods
        message += ", and runs on " + super.getFuelType();
        
        System.out.println(message);
    }
}

1) The super keyword refers to superclass (parent) objects.
:-It is used to call superclass methods, and to access the superclass constructor.
:-The main use of this is to remove the confusion between superclasses and subclasses that have methods with the same name.

2) The this keyword refers to the current object in a method or constructor.
:-This will always remain the first statement. or else it will generate an error.
:-We can call the functions(methods) through this keyword. eg:- this.display();
:-If the variable's name is same so it will differentiate between the local and  instance variables. 

The main difference between this and super keyword is:-
:-this keyword refers to the current object.
:-while the "super" keyword allows access to the members of the parent class.
:-These keywords help resolve naming conflicts, differentiate between instance variables and parameters, and call constructors effectively.


Task 2:-
a) Exception handling is a powerful mechanism to handle the run time errors,so that normal flow can be maintained throughout the program when executing.
There are two types of exceptions:-
1) Checked
2) Unchecked 

There are 5 keywords in this:-
1)Try:- used when there are high chances for an error to occur.
2)Catch:- holds the errors that come in the try block.
3)Throw:- throws away the errors.
4)Throws
5)Finally:-will always execute even if there is an exception in the program or not.

Example of Checked Exception:-
Arithmatic Exception:-

public class ArithmaticExcep {
    int a=5;
    void calculate()
    {
        try
        {
            int n=a/0;
        }
    }
    catch(arithmatic e)
    {
        System.out.println("Exception Error");
    }
public static void main(String ar[])
{
    ArithmaticExcep obj=new ArithmaticExcep();
    calculate.obj();
}
}

b) Multiple interface:-
// Interface 1
interface Engine {
    void start();
    void stop();
}

// Interface 2
interface MusicPlayer {
    void playMusic();
    void stopMusic();
}

// Class implementing both interfaces
class Car implements Engine, MusicPlayer {
    @Override
    public void start() {
        System.out.println("Car started");
    }

    @Override
    public void stop() {
        System.out.println("Car stopped");
    }

    @Override
    public void playMusic() {
        System.out.println("Music playing in the car");
    }

    @Override
    public void stopMusic() {
        System.out.println("Music stopped");
    }
}

public class Main {
    public static void main(String[] args) {
        Car car = new Car();
        car.start();
        car.playMusic();
        car.stopMusic();
        car.stop();
    }
}




