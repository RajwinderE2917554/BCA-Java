Task-1:

Imagine you are developing a Java application for a car rental agency. In this system, you have a class called Vehicle representing general properties and behaviors of vehicles.
Additionally, you have a subclass called Car, which extends the Vehicle class and adds specific features related to cars, such as the number of doors and the type of fuel.
While implementing methods in the Car class, you find yourself needing to differentiate between local variables, instance variables, and superclass variables.
1.	Explain the role and usage of the super keyword in Java. Provide examples illustrating how super can be used to access superclass members and invoke superclass constructors within a subclass like Car.
2.	Describe the significance of the this keyword in Java and how it differs from super. 
Give examples demonstrating the use of this to refer to instance variables and methods within the same class, and discuss scenarios where using this is necessary for disambiguation or clarification.

Task-2: 
a.	Recall the basic principles of exception handling in Java, give example of try-catch blocks and the handling of checked exception. 
b.  Write a program to demonstrate Interface and implements multiple interface in a java.


Answer :-

1. Super Keyword:
   - The super keyword in Java is used to refer to immediate parent class members (fields and methods). It is especially useful in cases of method overriding to differentiate between superclass and subclass methods.
   
 Accessing superclass members and invoking superclass constructor in a subclass.

java
class Vehicle {
    int Speed;

    Vehicle(int Speed) {
        this.Speed = Speed;
    }

    void displaySpeed() {
        System.out.println("Speed: " +Speed);
    }
}

class Car extends Vehicle {
    int doors;

    Car(int Speed, int doors) {
        super(Speed);          this.doors = doors;
    }

    void displayDetails() {
        super.displaySpeed(); 
        System.out.println("Number of Doors: " + doors);
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car(200, 4);
        myCar.displayDetails();
    }
}


2. This Keyword:
   - The this keyword refers to the current instance of the class and is used to differentiate between instance variables/methods and local variables with the same name. It's also used to invoke current class constructors from other constructors (constructor chaining).
   - Example: Using this to refer to instance variables and methods within the same class.

java
class Example {
    int x;

    Example(int x) {
        this.x = x;  
    }

    void display() {
        System.out.println("Value of x: " + this.x);  
    }

    void update(int x) {
        this.x = x;  
    }
}


### Task 2: Exception Handling and Interface Implementation

a. Exception Handling:
   - In Java, exception handling is done using try-catch blocks. Checked exceptions must be handled explicitly using try-catch or specifying them in the method signature with throws.
   - Example:

java
public class Example {
    public static void main(String[] args) {
int a=20;
        try {
           
           int data =a/0;
       } 
catch (Exception e) {
            System.out.println("Exception is : " + e);
        }
System.out.println("exception caught and rest of the code will be proceeded");
    }
}


b. Interface and Multiple Interface Implementation:
   - An interface in Java is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types.
   - Multiple interfaces can be implemented in a class using the implements keyword.
   - Example:

java
interface Interface1 {
    void method1();
}

interface Interface2 {
    void method2();
}

class MyClass implements Interface1, Interface2 {
    public void method1() {
        System.out.println("Implementation of method1");
    }

    public void method2() {
        System.out.println("Implementation of method2");
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.method1();
        obj.method2();
    }
}
